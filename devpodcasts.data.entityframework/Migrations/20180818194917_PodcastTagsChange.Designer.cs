// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using DevPodcast.Data.EntityFramework;

namespace DevPodcast.Data.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180818194917_PodcastTagsChange")]
    partial class PodcastTagsChange
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("devpodcasts.domain.entities.BasePodcast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("ItunesId")
                        .HasMaxLength(50);

                    b.Property<string>("ItunesSubscriberUrl");

                    b.Property<string>("PodcastSite");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("BasePodcast");
                });

            modelBuilder.Entity("devpodcasts.domain.entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("devpodcasts.domain.entities.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AudioDuration")
                        .HasMaxLength(10);

                    b.Property<string>("AudioType")
                        .HasMaxLength(10);

                    b.Property<string>("AudioUrl");

                    b.Property<string>("Author")
                        .HasMaxLength(250);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<int>("PodcastId");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SourceUrl");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("PodcastId");

                    b.ToTable("Episode");
                });

            modelBuilder.Entity("devpodcasts.domain.entities.EpisodeCategory", b =>
                {
                    b.Property<int>("CategoryId");

                    b.Property<int>("EpisodeId");

                    b.HasKey("CategoryId", "EpisodeId");

                    b.HasIndex("EpisodeId");

                    b.ToTable("EpisodeCategory");
                });

            modelBuilder.Entity("devpodcasts.domain.entities.EpisodeTag", b =>
                {
                    b.Property<int>("TagId");

                    b.Property<int>("EpisodeId");

                    b.HasKey("TagId", "EpisodeId");

                    b.HasIndex("EpisodeId");

                    b.ToTable("EpisodeTag");
                });

            modelBuilder.Entity("devpodcasts.domain.entities.Podcast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Artists")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("EpisodeCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FeedUrl");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("ItunesId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(N'')")
                        .HasMaxLength(50);

                    b.Property<DateTime>("LatestReleaseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ShowUrl");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Podcast");
                });

            modelBuilder.Entity("devpodcasts.domain.entities.PodcastCategory", b =>
                {
                    b.Property<int>("CategoryId");

                    b.Property<int>("PodcastId");

                    b.HasKey("CategoryId", "PodcastId");

                    b.HasIndex("PodcastId");

                    b.ToTable("PodcastCategory");
                });

            modelBuilder.Entity("devpodcasts.domain.entities.PodcastTag", b =>
                {
                    b.Property<int>("TagId");

                    b.Property<int>("PodcastId");

                    b.HasKey("TagId", "PodcastId");

                    b.HasIndex("PodcastId");

                    b.ToTable("PodcastTag");
                });

            modelBuilder.Entity("devpodcasts.domain.entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("devpodcasts.domain.entities.Episode", b =>
                {
                    b.HasOne("devpodcasts.domain.entities.Podcast", "Podcast")
                        .WithMany("Episodes")
                        .HasForeignKey("PodcastId")
                        .HasConstraintName("FK_Episode_Podcast")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("devpodcasts.domain.entities.EpisodeCategory", b =>
                {
                    b.HasOne("devpodcasts.domain.entities.Category", "Category")
                        .WithMany("EpisodeCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("devpodcasts.domain.entities.Episode", "Episode")
                        .WithMany("EpisodeCategories")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("devpodcasts.domain.entities.EpisodeTag", b =>
                {
                    b.HasOne("devpodcasts.domain.entities.Episode", "Episode")
                        .WithMany("EpisodeTags")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("devpodcasts.domain.entities.Tag", "Tag")
                        .WithMany("EpisodeTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("devpodcasts.domain.entities.PodcastCategory", b =>
                {
                    b.HasOne("devpodcasts.domain.entities.Category", "Category")
                        .WithMany("PodcastCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("devpodcasts.domain.entities.Podcast", "Podcast")
                        .WithMany("PodcastCategories")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("devpodcasts.domain.entities.PodcastTag", b =>
                {
                    b.HasOne("devpodcasts.domain.entities.Podcast", "Podcast")
                        .WithMany("PodcastTags")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("devpodcasts.domain.entities.Tag", "Tag")
                        .WithMany("PodcastTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
