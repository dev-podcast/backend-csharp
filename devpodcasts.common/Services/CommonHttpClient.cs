using System.Net.Http.Headers;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;

namespace devpodcasts.common.Services;

public class CommonHttpClient
{
    private readonly HttpClient _httpClient;
    private readonly ILogger<CommonHttpClient> _logger;
    
    public CommonHttpClient(ILogger<CommonHttpClient> logger, HttpClient httpClient)
    {
        _logger = logger;
        _httpClient = httpClient;
        _httpClient.BaseAddress = new Uri("http://localhost:5201");
        _httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
    }


    public async Task<HttpResponseMessage> PostAsync<T>(T postBody, string url)
    {
        try
        {
            // Serialize the postBody to JSON
            var json = JsonConvert.SerializeObject(postBody);
        
            // Create a HttpContent object with the json
            var httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            // Use the HttpClient to send a POST request
            var response = await _httpClient.PostAsync(url, httpContent);

            // Return the response generated by the server
            return response;
        }
        catch(Exception ex)
        {
            // Log any errors that occur to the ILogger<CommonHttpClient>
            _logger.LogError(ex, $"An error occurred while executing PostAsync: {ex.Message}");
       
            // Throw the exception again to pass it up the stack
            throw;
        }   
    }

    public async Task<HttpResponseMessage> GetAsync(string url)
    {
        try
        {
            // Use the HttpClient to send a GET request
            var response = await _httpClient.GetAsync(url);

            // Return the response generated by the server
            return response;
        }
        catch(Exception ex)
        {
            // Log any errors that occur to the ILogger<CommonHttpClient>
            _logger.LogError(ex, $"An error occurred while executing GetAsync: {ex.Message}");
       
            // Throw the exception again to pass it up the stack
            throw;
        }  
    }
}